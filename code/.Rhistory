trim.measure = "gain.R2",
trim = 20)
TF_view <- create_initial_view(hvg_TF) %>%
add_paraview(geometry, l = 200)           # This may still take some time
expression_df <- as.data.frame(t(expression))
reticulate::repl_python()
# In Python:
net = dc.get_collectri()
acts_tfs=  dc.run_ulm(
mat = r.expression_df,
net = net,
verbose = True,
use_raw = False,
)
quit
est_TF <- py$acts_tfs
reticulate::repl_python()
# In Python:
import decoupler as dc
# In Python:
net = dc.get_collectri()
acts_tfs=  dc.run_ulm(
mat = r.expression_df,
net = net,
verbose = True,
use_raw = False,
)
quit
est_TF <- py$acts_tfs
# Highly variable genes
hvg <- FindVariableFeatures(expression, selection.method = "vst", nfeatures = 1000) %>%
filter(variable == TRUE)
hvg_expr <- expression[rownames(hvg), ]
# Extract TF from the highly variable genes
hvg_TF<- est_TF[[1]][, colnames(est_TF[[1]]) %in% rownames(hvg_expr)]
TF_view <- create_initial_view(hvg_TF) %>%
add_paraview(geometry, l = 200)           # This may still take some time
# Combine Views
comp_TF_path_views <- comp_views %>% add_views(create_view("paraview.TF.200", TF_view[["paraview.200"]]$data, "para.TF.200")) %>%
add_views(create_view("paraview.path.200", path_act_views[["paraview.200"]]$data, "para.path.200"))
# Run Misty
run_misty(comp_TF_path_views, "result/comp_TF_path", model.function = linear_model, bypass.intra = TRUE)
misty_results_comp_TF_pathway <- collect_results("result/comp_TF_path")
misty_results_comp_TF_pathway %>%
plot_interaction_heatmap("para.TF.200",
clean = TRUE,
trim.measure = "gain.R2",
trim = 20)
DefaultAssay(seurat) <- "SCT"
SpatialFeaturePlot(seurat, features = "MYC", image.alpha = 0)
DefaultAssay(seurat) <- "c2l_props"
SpatialFeaturePlot(seurat, features = "Fibroblasts", image.alpha = 0)
misty_results_comp_TF_pathway %>%
plot_improvement_stats("gain.R2") %>%
plot_view_contributions()
download.file("https://raw.githubusercontent.com/saezlab/liana-py/main/liana/resource/omni_resource.csv",
destfile = "omni_resource.csv", method = "curl")
# Ligand Receptor Resource
omni_resource <- read_csv("omni_resource.csv")%>%
filter(resource == "consensus")
# Get highly variable ligands
ligands <- omni_resource %>%
pull(source_genesymbol) %>%
unique()
hvg_lig <- hvg_expr[rownames(hvg_expr) %in% ligands,]
# Get highly variable receptors
receptors <- omni_resource %>%
pull(target_genesymbol) %>%
unique()
hvg_recep <- hvg_expr[rownames(hvg_expr) %in% receptors,]
# Clean names
rownames(hvg_lig) <- hvg_lig %>%
clean_names(parsing_option = 0) %>%
rownames(.)
rownames(hvg_recep) <- hvg_recep %>% c
misty_results_com_path_act_linear %>%
plot_interaction_heatmap("juxta.path.130", clean = TRUE)
misty_results_com_path_act_linear %>%
plot_interaction_heatmap("para.path.200", clean = TRUE)
misty_results_com_path_act_linear %>%
plot_interaction_heatmap("juxta.path.130", clean = TRUE)
SpatialFeaturePlot(seurat, features = "tnfa", image.alpha = 0)
DefaultAssay(seurat) <- "c2l_props"
SpatialFeaturePlot(seurat, features = "Adipocytes", image.alpha = 0)
View(getModel)
View(getModel())
View(progeny::getModel())
view(progeny::getModel())
view(progeny::getModel
)
View(progeny::getModel)
View(progeny::model_human_full)
remotes::install_github("jtanevski/mistyR@devel")
BiocManager::install("mistyR")
BiocManager::install("mistyR", force = TRUE
)
gc()
library(devtools)
setwd("E:/LabRotationVelten/LabRotationVelten")
install.packages(c("abind", "archive", "BiocManager", "bit", "bit64", "bitops", "bookdown", "broom", "bslib", "car", "caTools", "checkmate", "cli", "clock", "colorspace", "corrplot", "cpp11", "crayon", "curl", "data.table", "digest", "distances", "downlit", "e1071", "emmeans", "evaluate", "fastDummies", "fastmap", "fields", "fitdistrplus", "FNN", "foreign", "future", "gert", "ggplot2", "ggrepel", "ggsci", "glue", "hdf5r", "htmltools", "httr2", "ipred", "jsonlite", "knitr", "leaps", "lme4", "magick", "matrixStats", "minqa", "mvtnorm", "nlme", "nloptr", "openssl", "parallelly", "patchwork", "pbkrtest", "pkgdown", "pkgload", "PKI", "plotly", "polyclip", "prodlim", "profvis", "ps", "ragg", "RANN", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "recipes", "renv", "reprex", "reticulate", "rjson", "rlang", "rmarkdown", "roxygen2", "RSpectra", "shiny", "SparseM", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringi", "tidyr", "timeDate", "tinytex", "usethis", "uuid", "V8", "waldo", "withr", "xfun", "XML", "yaml"))
install.packages(c("abind", "archive", "BiocManager", "bit", "bit64", "bitops", "bookdown", "broom", "bslib", "car", "caTools", "checkmate", "cli", "clock", "colorspace", "corrplot", "cpp11", "crayon", "curl", "data.table", "digest", "distances", "downlit", "e1071", "emmeans", "evaluate", "fastDummies", "fastmap", "fields", "fitdistrplus", "FNN", "foreign", "future", "gert", "ggplot2", "ggrepel", "ggsci", "glue", "hdf5r", "htmltools", "httr2", "ipred", "jsonlite", "knitr", "leaps", "lme4", "magick", "matrixStats", "minqa", "mvtnorm", "nlme", "nloptr", "openssl", "parallelly", "patchwork", "pbkrtest", "pkgdown", "pkgload", "PKI", "plotly", "polyclip", "prodlim", "profvis", "ps", "ragg", "RANN", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "recipes", "renv", "reprex", "reticulate", "rjson", "rlang", "rmarkdown", "roxygen2", "RSpectra", "shiny", "SparseM", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringi", "tidyr", "timeDate", "tinytex", "usethis", "uuid", "V8", "waldo", "withr", "xfun", "XML", "yaml"))
detach("package:methods", unload = TRUE)
detach("package:utils", unload = TRUE)
detach("package:stats", unload = TRUE)
detach("package:grDevices", unload = TRUE)
detach("package:graphics", unload = TRUE)
detach("package:datasets", unload = TRUE)
detach("package:base", unload = TRUE)
install.packages(c("abind", "archive", "BiocManager", "bit", "bit64", "bitops", "bookdown", "broom", "bslib", "car", "caTools", "checkmate", "cli", "clock", "colorspace", "corrplot", "cpp11", "crayon", "curl", "data.table", "digest", "distances", "downlit", "e1071", "emmeans", "evaluate", "fastDummies", "fastmap", "fields", "fitdistrplus", "FNN", "foreign", "future", "gert", "ggplot2", "ggrepel", "ggsci", "glue", "hdf5r", "htmltools", "httr2", "ipred", "jsonlite", "knitr", "leaps", "lme4", "magick", "matrixStats", "minqa", "mvtnorm", "nlme", "nloptr", "openssl", "parallelly", "patchwork", "pbkrtest", "pkgdown", "pkgload", "PKI", "plotly", "polyclip", "prodlim", "profvis", "ps", "ragg", "RANN", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "recipes", "renv", "reprex", "reticulate", "rjson", "rlang", "rmarkdown", "roxygen2", "RSpectra", "shiny", "SparseM", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringi", "tidyr", "timeDate", "tinytex", "usethis", "uuid", "V8", "waldo", "withr", "xfun", "XML", "yaml"))
library(base, lib.loc = "C:/Program Files/R/R-4.3.2/library")
install.packages(c("abind", "archive", "BiocManager", "bit", "bit64", "bitops", "bookdown", "broom", "bslib", "car", "caTools", "checkmate", "cli", "clock", "colorspace", "corrplot", "cpp11", "crayon", "curl", "data.table", "digest", "distances", "downlit", "e1071", "emmeans", "evaluate", "fastDummies", "fastmap", "fields", "fitdistrplus", "FNN", "foreign", "future", "gert", "ggplot2", "ggrepel", "ggsci", "glue", "hdf5r", "htmltools", "httr2", "ipred", "jsonlite", "knitr", "leaps", "lme4", "magick", "matrixStats", "minqa", "mvtnorm", "nlme", "nloptr", "openssl", "parallelly", "patchwork", "pbkrtest", "pkgdown", "pkgload", "PKI", "plotly", "polyclip", "prodlim", "profvis", "ps", "ragg", "RANN", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "recipes", "renv", "reprex", "reticulate", "rjson", "rlang", "rmarkdown", "roxygen2", "RSpectra", "shiny", "SparseM", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringi", "tidyr", "timeDate", "tinytex", "usethis", "uuid", "V8", "waldo", "withr", "xfun", "XML", "yaml"))
library(methods, lib.loc = "C:/Program Files/R/R-4.3.2/library")
library(utils, lib.loc = "C:/Program Files/R/R-4.3.2/library")
install.packages(c("abind", "archive", "BiocManager", "bit", "bit64", "bitops", "bookdown", "broom", "bslib", "car", "caTools", "checkmate", "cli", "clock", "colorspace", "corrplot", "cpp11", "crayon", "curl", "data.table", "digest", "distances", "downlit", "e1071", "emmeans", "evaluate", "fastDummies", "fastmap", "fields", "fitdistrplus", "FNN", "foreign", "future", "gert", "ggplot2", "ggrepel", "ggsci", "glue", "hdf5r", "htmltools", "httr2", "ipred", "jsonlite", "knitr", "leaps", "lme4", "magick", "matrixStats", "minqa", "mvtnorm", "nlme", "nloptr", "openssl", "parallelly", "patchwork", "pbkrtest", "pkgdown", "pkgload", "PKI", "plotly", "polyclip", "prodlim", "profvis", "ps", "ragg", "RANN", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "recipes", "renv", "reprex", "reticulate", "rjson", "rlang", "rmarkdown", "roxygen2", "RSpectra", "shiny", "SparseM", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringi", "tidyr", "timeDate", "tinytex", "usethis", "uuid", "V8", "waldo", "withr", "xfun", "XML", "yaml"))
#---------------------------Seed------------------------------------------------
set.seed(42)
#---------------------------Libraries-------------------------------------------
library(MOFA2)
BiocManager::install("MOFA2")
devtools::install_github("MarioniLab/StabMap")
#---------------------------Seed------------------------------------------------
set.seed(42)
#---------------------------Libraries-------------------------------------------
library(MOFA2)
library(scater)
library(scran)
library(StabMap)
library(tidyverse)
library(cluster)
library(patchwork)
library(fpc)
#---------------------------Seed------------------------------------------------
set.seed(42)
#---------------------------Libraries-------------------------------------------
library(MOFA2)
library(scater)
library(scran)
library(StabMap)
library(tidyverse)
library(cluster)
library(patchwork)
library(fpc)
#library(fpc)
library(MultiAssayExperiment)
library(plotly)
source("~/Functions/data_prep_functions.R")
getwd()
setwd("E:/LabRotationVelten/LabRotationVelten")
source("~/Functions/data_prep_functions.R")
getwd()
setwd("E:/LabRotationVelten/LabRotationVelten/code/")
source("E:/LabRotationVelten/LabRotationVelten/Functions/data_prep_functions.R")
source("E:/LabRotationVelten/LabRotationVelten/Functions/integration_metrics_functions.R")
source("E:/LabRotationVelten/LabRotationVelten/Functions/adaptiveKNN.R")
pathway_dataset <- "E:/LabRotationVelten/LabRotationVelten/Data/data.RDS"
na_features <-  953:1740
na_cells <- 1:5016
# Loaded from RDS cause I cant install the SingleCellMultiModal package
mae <- readRDS(pathway_dataset)
# Peripheral Blood Mononuclear Cells provided by 10x Genomics website
# 10x Genomics Multiome technology enables simultaneous profiling of the transcriptome
# (using 3’ gene expression) and epigenome (using ATAC-seq) from single cells to deepen
# our understanding of how genes are expressed and regulated across different cell types.
mae <- scMultiome("pbmc_10x", mode = "*", dry.run = FALSE, format = "MTX")
library(SingleCellMultiModal)
mae <- scMultiome("pbmc_10x", mode = "*", dry.run = FALSE, format = "MTX")
# Loaded from RDS cause I cant install the SingleCellMultiModal package
# mae <- readRDS(pathway_dataset)
metadata <- mae@colData
# Loaded from RDS cause I cant install the SingleCellMultiModal package
# mae <- readRDS(pathway_dataset)
metadata <- mae@colData
# RNA
sce.rna <- normalize_and_select_features(experiments(mae)[["rna"]], 0.01, 0.05)
# ATAC
sce.atac <- normalize_and_select_features(experiments(mae)[["atac"]], 0.25, 0.05)
# Combine
logcounts_all_matrix <- as.matrix(rbind(logcounts(sce.rna), logcounts(sce.atac)))
# Celltypes of all samples
all_celltypes <- as.data.frame(setNames(metadata$celltype, colnames(logcounts_all_matrix)))
colnames(all_celltypes) <- "celltype"
# Clusters
cluster <- as.data.frame(metadata) %>%
group_by(celltype) %>%
summarise(n = n()) %>%
mutate(n = 1:14)
stab_list <- stab_build_model(data = logcounts_all_matrix,
na_features =  na_features,
na_cells = na_cells)
mosaicDataUpSet(stab_list)
plot(mosaicDataTopology(stab_list))
# Training
stab = stabMap(stab_list,
ncomponentsReference = 70,
ncomponentsSubset = 70,
reference_list = c("all_feat"),
plot = FALSE,
scale.center = FALSE,
scale.scale = FALSE)
# UMAP
stab_umap_coord <- as.data.frame(calculateUMAP(t(stab)))
model <- mofa_build_model(data = logcounts_all_matrix,
na_features = na_features,
na_cells = na_cells,
metadata = metadata)
plot_data_overview(model)
# Training
trained_model <- mofa_parameter_train(spikeslab_weights = FALSE, model = model)
# UMAP
trained_model <- run_umap(trained_model)
mofa_umap_coord <- trained_model@dim_red$UMAP %>% select(UMAP1, UMAP2)
# Add metadata to the UMAP results (celltype, if it was an NA cell, cluster)
mofa_umap <- merge(trained_model@dim_red$UMAP, all_celltypes, by = 0)  %>%
full_join(cluster) %>%
mutate(isNA = if_else(sample %in% colnames(logcounts_all_matrix                                                        )[na_cells] , "NA", "notNA")) %>%
column_to_rownames("Row.names") %>%
select(-sample)
plot_factor(model,
factor = 1:15,
color_by = "celltype")
plot_factor(trained_model,
factor = 1:15,
color_by = "celltype")
correlate_factors_with_covariates(trained_model,
covariates = c("nFeature_RNA","nFeature_ATAC")
)
correlate_factors_with_covariates(trained_model,
covariates = c("nFeature_RNA","nFeature_ATAC")
)
install.packages("psych")
correlate_factors_with_covariates(trained_model,
covariates = c("nFeature_RNA","nFeature_ATAC", "celltype")
)
plot_factor(trained_model, factors=1, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=3, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=4, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=3, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=1, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=7, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=1, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_weights(trained_model,
view = "all_feat",
factors = 1,
nfeatures = 20,
text_size = 4
)
plot_weights(trained_model,
view = "all_feat",
factors = 2,
nfeatures = 20,
text_size = 4
)
plot_data_heatmap(mofa,
view = "all_feat",
factor = 1,
features = 50,
show_rownames = F, show_colnames = F,
cluster_rows = T, cluster_cols = F,
annotation_samples = "broad_celltype"
)
plot_data_heatmap(trained_model,
view = "all_feat",
factor = 1,
features = 50,
show_rownames = F, show_colnames = F,
cluster_rows = T, cluster_cols = F,
annotation_samples = "broad_celltype"
)
plot_factor(trained_model, factors=1, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
correlate_factors_with_covariates(trained_model,
covariates = c("nFeature_RNA","nFeature_ATAC", "celltype")
)
plot_factor(trained_model, factors=6, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
correlate_factors_with_covariates(trained_model,
covariates = c("nFeature_RNA","nFeature_ATAC", "celltype")
)
plot_factor(trained_model, factors=2, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=3, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=4, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=5, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=7, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=8, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=9, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=10, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=11, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=12, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=13, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=14, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=15, group_by = "celltype", color_by="broad_celltype") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_weights(trained_model,
factors = 4,
nfeatures = 10,
text_size = 4
)
plot_weights(trained_model,
view = "all_feat",
factors = 4,
nfeatures = 10,
text_size = 4
)
plot_factor(trained_model, factors=4, group_by = "celltype", color_by="CST3") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_weights(trained_model,
view = "all_feat",
factors = 5,
nfeatures = 10,
text_size = 4
)
plot_factor(trained_model, factors=4, group_by = "celltype", color_by="ITGB1") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=5, group_by = "celltype", color_by="ITGB1") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_weights(trained_model,
view = "missing_feat",
factors = 5,
nfeatures = 10,
text_size = 2
)
plot_weights(trained_model,
view = "missing_feat",
factors = 5,
nfeatures = 1,
text_size = 4
)
plot_factor(trained_model, factors=5, group_by = "celltype", color_by="chr2:86783559-86792275") +
theme(
axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1)
)
plot_factor(trained_model, factors=1,
group_by = "celltype", color_by="broad_celltype") +
theme(axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1))
plot_factor(trained_model, factors=2,
group_by = "celltype", color_by="broad_celltype") +
theme(axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1))
plot_factor(trained_model, factors=3,
group_by = "celltype", color_by="broad_celltype") +
theme(axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1))
plot_factor(trained_model, factors=7,
group_by = "celltype", color_by="broad_celltype") +
theme(axis.text.x = element_text(color="black", angle=40, vjust=1, hjust=1))
# UMAP
stab_umap_coord <- as.data.frame(calculateUMAP(t(stab)))
remove.packages('irlba')
install.packages('irlba')
install.packages("irlba")
# UMAP
stab_umap_coord <- as.data.frame(calculateUMAP(t(stab)))
```{r message=FALSE, warning=FALSE}
set.seed(42)
#---------------------------Libraries-------------------------------------------
library(MOFA2)
library(scater)
library(scran)
library(StabMap)
library(tidyverse)
library(cluster)
library(patchwork)
#library(fpc)
library(MultiAssayExperiment)
library(plotly)
# UMAP
stab_umap_coord <- as.data.frame(calculateUMAP(t(stab)))
# Add metadata to the UMAP results (celltype, if it was an NA cell, cluster)
stab_umap <- merge( as.data.frame(metadata), stab_umap_coord, by =0 ) %>%
mutate(isNA = if_else(Row.names %in% colnames(logcounts_all_matrix                                                        )[na_cells] , "NA", "notNA")) %>%
full_join(cluster) %>%
column_to_rownames("Row.names")
# StabMap
imp = imputeEmbedding(
stab_list,
stab,
reference = colnames(stab_list[["all_feat"]]),
query = colnames(stab_list[["missing_feat"]]))
# MOFA
trained_model <- impute(trained_model)
# StabMap
stab_rmse <- rmse_imp(imp_data = imp$all_feat[na_features,],
real_data = logcounts_all_matrix,
na_features = na_features,
na_cells = na_cells)
# MOFA
mofa_rmse<- rmse_imp(imp_data = trained_model@imputed_data$missing_feat[[1]][,na_cells],
real_data = logcounts_all_matrix,
na_features = na_features,
na_cells = na_cells)
cat(" StabMap RMSE:", stab_rmse, "\n", "MOFA RMSE:",mofa_rmse )
stab_rmse
rmse_imp
# StabMap
stab_rmse <- rmse_imp_table(imp_data = imp$all_feat[na_features,],
real_data = logcounts_all_matrix,
na_features = na_features,
na_cells = na_cells)
stab_rmse
# MOFA
mofa_rmse<- rmse_imp_table(imp_data = trained_model@imputed_data$missing_feat[[1]][,na_cells],
real_data = logcounts_all_matrix,
na_features = na_features,
na_cells = na_cells)
cor(stab_rmse$predicted, mofa_rmse$predicted, method = 'pearson')
plot_factor(trained_model, factors=1,
theme(axis.text.x = element_text(color="black", angle=90)
plot_factor(trained_model, factors=1,
group_by = "celltype", color_by="broad_celltype") +
theme(axis.text.x = element_text(color="black", angle=90))#
plot_factor(trained_model, factors=1,
group_by = "celltype", color_by="broad_celltype") +
theme(axis.text.x = element_text(color="black", angle=90))+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
plot_factor(trained_model, factors=1,
group_by = "celltype", color_by="broad_celltype") +
theme(axis.text.x = element_text(color="black", angle=90))
plot_factor(trained_model, factors=2,
group_by = "celltype", color_by="broad_celltype") +
theme(axis.text.x = element_text(color="black", angle=90))+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
plot_factor(trained_model, factors=3,
group_by = "celltype", color_by="broad_celltype") +
theme(axis.text.x = element_text(color="black", angle=90))+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
plot_factor(trained_model, factors=7,
group_by = "celltype", color_by="broad_celltype") +
theme(axis.text.x = element_text(color="black", angle=90))+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
plot_factor(trained_model, factors=1,
group_by = "celltype", color_by="broad_celltype") +
theme(axis.text.x = element_text(color="black", angle=90))+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+ theme(legend.position="none")
plot_factor(trained_model, factors=2,
group_by = "celltype", color_by="broad_celltype") +
theme(axis.text.x = element_text(color="black", angle=90))+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+ theme(legend.position="none")
plot_factor(trained_model, factors=3,
group_by = "celltype", color_by="broad_celltype") +
theme(axis.text.x = element_text(color="black", angle=90))+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+ theme(legend.position="none")
plot_factor(trained_model, factors=7,
group_by = "celltype", color_by="broad_celltype") +
theme(axis.text.x = element_text(color="black", angle=90))+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+ theme(legend.position="none")
