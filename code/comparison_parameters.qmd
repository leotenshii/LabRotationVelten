---
title: "Benchmark"
author: "Leoni Zimmermann"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    toc: true
editor: visual
---

# MOFA

```{r message=FALSE, warning=FALSE}
suppressMessages(c(library(tidyverse),
                   library(plotly),
                   library(patchwork),
                   library(knitr)))
```

```{r}
mofa_comparison <- read.table("~/R/Data/mofa_comparison.txt", header = TRUE, sep = " ", quote = "\"") %>%
  select(-mofa_mae)

```

## Parameter overview

scale_views

num_factor

spikeslab_weights

## (Mean) Silhoutte score for different number of factors

```{r}

m1 <- mofa_comparison %>% 
  group_by(num_factor) %>% 
  mutate(mean = mean(mean_sil_score)) %>%
  ggplot() +
  geom_point(aes(x = num_factor, y = mean_sil_score), alpha = 0.25) +
  #geom_point(aes(x = num_factor, y = mean, col = scale_views)) +
  geom_line(aes(x = num_factor, y = mean, group = scale_views, col = scale_views)) +
  theme_classic() +
  labs(title = "Mean silhoutte score for different number of factors", 
      subtitle= "Colored by scale_views FALSE or TRUE")

m2 <- mofa_comparison %>% 
  group_by(num_factor, spikeslab_weights ) %>% 
  mutate(mean = mean(mean_sil_score)) %>%
  ggplot() +
  geom_point(aes(x = num_factor, y = mean_sil_score), alpha = 0.25) +
  geom_point(aes(x = num_factor, y = mean ,col = spikeslab_weights)) +
  geom_line(aes(x = num_factor, y = mean, group = spikeslab_weights ,col = spikeslab_weights)) +
  theme_classic()+
  labs(title = "Mean silhoutte score for different number of factors", 
      subtitle= "Colored by spikeslab_weights FALSE or TRUE")

m3 <- mofa_comparison %>% 
  group_by(num_factor ) %>% 
  mutate(mean = mean(mean_sil_score)) %>%
  ggplot() +
  geom_point(aes(x = num_factor, y = mean_sil_score), alpha = 0.25) +
  geom_point(aes(x = num_factor, y = mean), col = "red") +
  geom_line(aes(x = num_factor, y = mean, group = 1 ), col = "red") +
  theme_classic()+
  labs(title = "Mean silhoutte score for different number of factors")
```

```{r}
m4 <- mofa_comparison %>% 
  group_by(num_factor, scale_views) %>% 
  mutate(mean = mean(mofa_rmse)) %>%
  ggplot() +
  geom_point(aes(x = num_factor, y = mofa_rmse), alpha = 0.25) +
  geom_point(aes(x = num_factor, y = mean, col = scale_views)) +
  geom_line(aes(x = num_factor, y = mean, group = scale_views, col = scale_views)) +
  theme_classic() +
  labs(title = "rmse for different number of factors", 
      subtitle= "Colored by scale_views FALSE or TRUE")

m5 <- mofa_comparison %>% 
  group_by(num_factor, spikeslab_weights ) %>% 
  mutate(mean = mean(mofa_rmse)) %>%
  ggplot() +
  geom_point(aes(x = num_factor, y = mofa_rmse), alpha = 0.25) +
  geom_point(aes(x = num_factor, y = mean ,col = spikeslab_weights)) +
  geom_line(aes(x = num_factor, y = mean, group = spikeslab_weights ,col = spikeslab_weights)) +
  theme_classic()+
  labs(title = "rmse for different number of factors", 
      subtitle= "Colored by spikeslab_weights FALSE or TRUE")

m6 <- mofa_comparison %>% 
  group_by(num_factor ) %>% 
  mutate(mean = mean(mofa_rmse)) %>%
  ggplot() +
  geom_point(aes(x = num_factor, y = mofa_rmse), alpha = 0.25) +
  geom_point(aes(x = num_factor, y = mean), col = "red") +
  geom_line(aes(x = num_factor, y = mean, group = 1 ), col = "red") +
  theme_classic()+
  labs(title = "rmse for different number of factors")
```

```{r fig.height=10, fig.width=10}
print((m1 + m4)/ (m2 + m5)/  (m3 + m6) + plot_annotation(title = 'Influence of different number of factors for integration (left) and imputation (right) with MOFA'))
```

## Plots for all metrics

Now for all different metrics in respect to num_factor and scale_views.

```{r}
for (i in 1:9) {
  var_name <- colnames(mofa_comparison)[3+i]
  
  m <- mofa_comparison %>% 
        group_by(num_factor, scale_views) %>%
        mutate(mean = mean(.data[[var_name]])) %>%
        ggplot() +
        geom_point(aes(x = num_factor, y = .data[[var_name]], col = spikeslab_weights), alpha = 0.25) +
        geom_point(aes(x = num_factor, y = mean), col = "red") +
        geom_line(aes(x = num_factor, y = mean, group = 1), col = "red") +
        theme_classic() +
        facet_grid(cols = vars(scale_views)) +
        ggtitle(paste("Plot for column:", var_name)) 
  
  print(m)
}


```

Result seem to heavily depend on the num_factor. For integration low number of factors seem better, for imputation higher number of factors.

## Best parameters? (Be careful not 50/50 integration/imputation)

```{r}
min_parameters <- c("mofa_rmse", "mofa_mae", "time_integration", "imputation_time")
max_parameters <- c("mean_sil_score", "min_sil_score", "max_sil_score", "dunn", "mofa_knn_acc", "mofa_knn_acc_bal" )
```

Normalize the values of the metrics (between 0 and 1) and take the mean for each parameter set

Only the integration metrics:

```{r}
kable(mofa_comparison %>%
            select(-c(imputation_time, time_integration, mofa_rmse)) %>%
            mutate(parameters = paste("num_factor", num_factor, 
                                      "| scale_views: ", scale_views, 
                                      "| spikeslab_weights: ", spikeslab_weights )) %>%
            pivot_longer( cols = c(mean_sil_score, mofa_knn_acc),
                          names_to = "metric",
                          values_to = "value") %>%
            group_by(metric) %>%
            mutate(normalized_value = case_when(
              metric %in% max_parameters ~ (value - min(value)) / (max(value) - min(value)),
              metric %in% min_parameters ~ (max(value) - value) / (max(value) - min(value))))%>%
            group_by(parameters) %>%
            summarize(combined_score = mean(normalized_value, na.rm = TRUE)) %>%
            arrange(desc(combined_score)) %>%
            head())
```

Still the same one first

Only for imputation:

```{r}
kable(mofa_comparison %>%
          select(c(  mofa_rmse, scale_views, num_factor, spikeslab_weights)) %>%
          mutate(parameters = paste("num_factor", num_factor, 
                                    "| scale_views: ", scale_views, 
                                    "| spikeslab_weights: ", spikeslab_weights )) %>%
          pivot_longer( cols = mofa_rmse,
                        names_to = "metric",
                        values_to = "value") %>%
          group_by(metric) %>%
          mutate(normalized_value = (max(value) - value) / (max(value) - min(value)))%>%
          group_by(parameters) %>%
          summarize(combined_score = mean(normalized_value, na.rm = TRUE)) %>%
          arrange(desc(combined_score)) %>%
          head())
```

# StabMap

```{r}

stab_comparison <- read.table("~/R/Data/stab_comparison.txt", header = TRUE, sep = " ", quote = "\"", stringsAsFactors = FALSE)%>%
  select(-stab_mae)

```

## (Mean) Silhoutte score for different number of factors

Mean silhoutte score for different number of PC for Reference

```{r}
stab_comparison %>% 
  group_by(ncomponentsReference,ncomponentsSubset) %>% 
  mutate(sd_mean_sil_score = sd(mean_sil_score)) %>%
  mutate(mean = mean(mean_sil_score)) %>%
  ggplot() +
  geom_point(aes(x = ncomponentsReference, y = mean), col = "red") +
  geom_line(aes(x = ncomponentsReference, y = mean, group = 1), col = "red") +
  geom_errorbar(aes(x = ncomponentsReference,ymin = (mean - sd_mean_sil_score), ymax = (mean + sd_mean_sil_score)), width = 4, col = "azure4") +
  facet_grid(cols = vars(ncomponentsSubset)) +
  theme_classic() +
  labs(title = "Mean silhoutte score for different number of ncomponentsReference", 
      subtitle= "Seperated by ncomponentsSubset")
```

30/40 seem to be the best, PC from Subset dont make a difference. For rmse, higher PC are better (butt very small diff)

Now mean_silhoutte score for PC Subset

```{r}
stab_comparison %>% 
  group_by(ncomponentsSubset) %>% 
  mutate(sd_mean_sil_score = sd(mean_sil_score)) %>%
  mutate(mean = mean(mean_sil_score)) %>%
  ggplot() +
  geom_errorbar(aes(x = ncomponentsSubset,ymin = (mean - sd_mean_sil_score), ymax = (mean + sd_mean_sil_score)), width = 4, col = "azure4") +
  geom_point(aes(x = ncomponentsSubset, y = mean), col = "red") +
  geom_line(aes(x = ncomponentsSubset, y = mean, group = 1), col = "red")  +
  theme_classic() +
  labs(title = "Mean silhoutte score for different number of ncomponentsSubset")
```

Difference in the hundredths --\> no so important, same for rmse

```{r}
stab_comparison %>% 
  group_by(ncomponentsReference, ncomponentsSubset) %>% 
  mutate(mean = mean(mean_sil_score)) %>%
  ggplot() +
  geom_point(aes(x = ncomponentsReference, y = mean_sil_score, col = scale.scale ), alpha = 0.25) +
  #geom_point(aes(x = ncomponentsReference, y = mean_sil_score, col = scale.center ), alpha = 0.25) +
  #geom_point(aes(x = ncomponentsReference, y = mean_sil_score, col = project_all  ), alpha = 0.25) +
  geom_point(aes(x = ncomponentsReference, y = mean), col = "red") +
  geom_line(aes(x = ncomponentsReference, y = mean, group = ncomponentsSubset), col = "red") +
  facet_grid(cols = vars(ncomponentsSubset)) +
  theme_classic() +
  labs(title = "Mean silhoutte score for different number of principal components", 
      subtitle= "Seperated by xxx")
```

The lower groups of points mostly have scale.scale = TRUE, scale.center TRUE and mixed for project_all

## Plots for all metrices for different parameters

Mean of all metrics for maxFeatures

```{r}
for (i in 1:8) {
  var_name <- colnames(stab_comparison)[6+i]
  
  p <- stab_comparison %>% 
        group_by(maxFeatures) %>%
        mutate(mean = mean(.data[[var_name]])) %>%
        ggplot() +
        #geom_point(aes(x = maxFeatures, y = .data[[var_name]]), alpha = 0.25) +
        geom_point(aes(x = maxFeatures, y = mean), col = "red") +
        geom_line(aes(x = maxFeatures, y = mean, group = 1), col = "red") +
        theme_classic() +
        ggtitle(paste("Plot for column:", var_name)) 
  
  print(p)
}
```

Max features seems to have no significant effect

For the others:

```{r}
for (i in 1:8) {
  var_name <- colnames(stab_comparison)[6+i]
  
  p <- stab_comparison %>% 
        group_by(project_all ) %>%
        mutate(mean = mean(.data[[var_name]])) %>%
        ggplot() +
        #geom_point(aes(x = project_all , y = .data[[var_name]]), alpha = 0.25) +
        geom_point(aes(x = project_all , y = mean), col = "red") +
        geom_line(aes(x = project_all , y = mean, group = 1), col = "red") +
        theme_classic() +
        ggtitle(paste("Plot for column:", var_name)) 
  
  print(p)
}

```

Only small differences, FALSE seems to be a little bit better

```{r}
for (i in 1:8) {
  var_name <- colnames(stab_comparison)[6+i]
  
  p <- stab_comparison %>% 
        group_by(scale.scale ) %>%
        mutate(mean = mean(.data[[var_name]])) %>%
        ggplot() +
        #geom_point(aes(x = scale.scale , y = .data[[var_name]]), alpha = 0.25) +
        geom_point(aes(x = scale.scale , y = mean), col = "red") +
        geom_line(aes(x = scale.scale, y = mean, group = 1), col = "red") +
        theme_classic() +
        ggtitle(paste("Plot for column:", var_name)) 
  
  print(p)
}
```

scale.scale does not have the biggest effect, but seems better with it being FALSE

```{r}
for (i in 1:8) {
  var_name <- colnames(stab_comparison)[6+i]
  
  p <- stab_comparison %>% 
        group_by(scale.center) %>%
        mutate(mean = mean(.data[[var_name]])) %>%
        ggplot() +
        #geom_point(aes(x = scale.center, y = .data[[var_name]]), alpha = 0.25) +
        geom_point(aes(x = scale.center, y = mean), col = "red") +
        geom_line(aes(x = scale.center, y = mean, group = 1), col = "red") +
        theme_classic() +
        ggtitle(paste("Plot for column:", var_name)) 
  
  print(p)
}
```

scale.center seems to be unimportant

```{r}
for (i in 1:8) {
  var_name <- colnames(stab_comparison)[6+i]
  
  p <- stab_comparison %>% 
        group_by(ncomponentsReference) %>%
        mutate(mean = mean(.data[[var_name]])) %>%
        ggplot() +
        #geom_point(aes(x = ncomponentsReference, y = .data[[var_name]]), alpha = 0.25) +
        geom_point(aes(x = ncomponentsReference, y = mean), col = "red") +
        geom_line(aes(x = ncomponentsReference, y = mean, group = 1), col = "red") +
        theme_classic() +
        ggtitle(paste("Plot for column:", var_name)) 
  
  print(p)
}
```

ncomponentsReference has a greater effect on integration than imputation, 40 has highest sil_score

```{r}
for (i in 1:8) {
  var_name <- colnames(stab_comparison)[6+i]
  
  p <- stab_comparison %>% 
        group_by(ncomponentsSubset) %>%
        mutate(mean = mean(.data[[var_name]])) %>%
        ggplot() +
        #geom_point(aes(x = ncomponentsSubset, y = .data[[var_name]]), alpha = 0.25) +
        geom_point(aes(x = ncomponentsSubset, y = mean), col = "red") +
        geom_line(aes(x = ncomponentsSubset, y = mean, group = 1), col = "red") +
        theme_classic() +
        ggtitle(paste("Plot for column:", var_name)) 
  
  print(p)
}
```

ncomponentsSubset seems not significant at all.

## Best parameters? (Be careful not 50/50 integration/imputation)

```{r}
stab_min_parameters <- c("stab_rmse", "time_integration", "time_imputation")
stab_max_parameters <- c("mean_sil_score", "min_sil_score", "max_sil_score",  "stab_knn_acc", "stab_knn_acc_bal" )
```

Only for integration:

```{r}
kable(stab_comparison %>%
          select(-c(time_integration, time_imputation, stab_rmse)) %>%
          mutate(parameters = paste("ncomponentsReference: ", ncomponentsReference, 
                                    "| ncomponentsSubset: ",       ncomponentsSubset, 
                                    "| maxFeatures: ",       maxFeatures, 
                                    "| scale.center: ",       scale.center, 
                                    "| scale.scale: ",       scale.scale, 
                                    "| project_all: ",       project_all )) %>%
          pivot_longer(
            cols = c(mean_sil_score, stab_knn_acc),
            names_to = "metric",
            values_to = "value") %>%
          group_by(metric) %>%
          mutate(normalized_value = case_when(
            metric %in% stab_max_parameters ~ (value - min(value)) / (max(value) - min(value)),
            metric %in% stab_min_parameters ~ (max(value) - value) / (max(value) - min(value))
          ))%>%
          group_by(parameters) %>%
          summarize(combined_score = mean(normalized_value, na.rm = TRUE)) %>%
          arrange(desc(combined_score)) %>% 
          slice(1:10))
```

Again: (Top 10) ncomponentsReference is 40 and 70 mixed, scale.center mixed and scale.scale FALSE Project_all mixed PC Subset and maxFeatures again seem rather random

Integration time taken into account: ncomponentsReference is \<50 (mostly 30/40), scale.center FALSE and scale.scale FALSE (mostly). Project_all mixed

Only for imputation:\

```{r}
kable(stab_comparison %>%
          select(-c(mean_sil_score, min_sil_score, max_sil_score, stab_knn_acc, stab_knn_acc_bal, time_integration, time_imputation)) %>%
          mutate(parameters = paste("ncomponentsReference: ", ncomponentsReference, 
                                    "| ncomponentsSubset: ",       ncomponentsSubset, 
                                    "| maxFeatures: ",       maxFeatures, 
                                    "| scale.center: ",       scale.center, 
                                    "| scale.scale: ",       scale.scale, 
                                    "| project_all: ",       project_all )) %>%
          pivot_longer(
            cols = c(stab_rmse),
            names_to = "metric",
            values_to = "value") %>%
          group_by(metric) %>%
          mutate(normalized_value = (max(value) - value) / (max(value) - min(value)))%>%
          group_by(parameters) %>%
          summarize(combined_score = mean(normalized_value, na.rm = TRUE)) %>%
          arrange(desc(combined_score)) %>% 
          slice(1:10))
```

ncomponentsReference 40, scale.center/ scale.scale FALSE . Project_all TRUE. PC Subset and maxFeatures again seem rather random

When imp time is taken into account: PC Ref \<50, scale center mixed, scale scale FALSE, project_all TRUE

## Other way of depicting of nComponents Influence on the mean silhoutee score

```{r}

```

```{r}
for (i in 1:5) {
  var_name <- colnames(stab_comparison)[1 + i]
  
  plot_data <- stab_comparison %>%
    group_by(ncomponentsReference, !!sym(var_name)) %>%
    summarize(mean = mean(mean_sil_score), .groups = 'drop')
  
  p <- ggplot(plot_data) +
    geom_point(aes(x = ncomponentsReference, 
                   y = mean, 
                   col = as.character(!!sym(var_name)))) +
    geom_line(aes(x = ncomponentsReference, 
                  y = mean, 
                  group = !!sym(var_name), 
                  col = as.character(!!sym(var_name)))) +
    theme_classic() +
    ggtitle(paste("Plot for parameter:", var_name))
  
  print(p)
}


for (i in 1:5) {
  var_name <- colnames(stab_comparison[, c(2,1,3:ncol(stab_comparison))])[1 + i]
  
  plot_data <- stab_comparison %>%
    group_by(ncomponentsSubset, !!sym(var_name)) %>%
    summarize(mean = mean(mean_sil_score), .groups = 'drop')
  
  p <- ggplot(plot_data) +
    geom_point(aes(x = ncomponentsSubset, 
                   y = mean, 
                   col = as.character(!!sym(var_name)))) +
    geom_line(aes(x = ncomponentsSubset, 
                  y = mean, 
                  group = !!sym(var_name), 
                  col = as.character(!!sym(var_name)))) +
    theme_classic() +
    ggtitle(paste("Plot for parameter:", var_name))
  
  print(p)
}


for (i in 1:5) {
  var_name <- colnames(stab_comparison[, c(3,1,2,4:ncol(stab_comparison))])[1 + i]
  
  plot_data <- stab_comparison %>%
    group_by(maxFeatures, !!sym(var_name)) %>%
    summarize(mean = mean(mean_sil_score), .groups = 'drop')
  
  p <- ggplot(plot_data) +
    geom_point(aes(x = maxFeatures, 
                   y = mean, 
                   col = as.character(!!sym(var_name)))) +
    geom_line(aes(x = maxFeatures, 
                  y = mean, 
                  group = !!sym(var_name), 
                  col = as.character(!!sym(var_name)))) +
    theme_classic() +
    ggtitle(paste("Plot for parameter:", var_name))
  
  print(p)
}
```

# Result tables

```{r}
mofa_comparison %>%
  filter(scale_views == FALSE, spikeslab_weights == FALSE, num_factor %in% c(15, 70)) %>%
  select(1:3, mean_sil_score, mofa_knn_acc, mofa_rmse)
```

```{r}
stab_comparison %>%
  filter(scale.scale == FALSE, scale.center == FALSE, ncomponentsReference == 70, ncomponentsSubset == 70, project_all == FALSE, maxFeatures == 1000) %>%
  select(1:6, mean_sil_score, stab_knn_acc, stab_rmse)
```

# rmse and sil_score for different num of factors

```{r}
mofa_comparison_numfactors <- read.table("~/R/Data/mofa_comparison_numfactors.txt", header = TRUE, sep = " ", quote = "\"", stringsAsFactors = FALSE)

ggplot(mofa_comparison_numfactors) +
  geom_point(aes(x = num_factor, y = mofa_rmse)) +
  geom_line(aes(x = num_factor, y = mofa_rmse, group = 1)) +
  theme_classic()

ggplot(mofa_comparison_numfactors) +
  geom_point(aes(x = num_factor, y = mean_sil_score)) +
  geom_line(aes(x = num_factor, y = mean_sil_score, group = 1)) +
  theme_classic()
```

```{r}
stab_comparison_numfactors <- read.table("~/R/Data/stab_comparison_numfactors.txt", header = TRUE, sep = " ", quote = "\"", stringsAsFactors = FALSE) %>%
  mutate(num_pc = ncomponentsReference)

ggplot(stab_comparison_numfactors) +
  geom_point(aes(x = num_pc, y = stab_rmse)) +
  geom_line(aes(x = num_pc, y = stab_rmse, group = 1)) +
  theme_classic()

ggplot(stab_comparison_numfactors) +
  geom_point(aes(x = num_pc, y = mean_sil_score)) +
  geom_line(aes(x = num_pc, y = mean_sil_score, group = 1)) +
  theme_classic()
```

```{r}
cbind(stab_comparison_numfactors, mofa_comparison_numfactors %>% select(num_factor, mean_sil_score, mofa_rmse) %>% rename(mofa_mean_sil_score = mean_sil_score)) %>%
  ggplot() +
  geom_point(aes(x = num_factor, y = mofa_mean_sil_score, col = "MOFA")) + 
  geom_line(aes(x = num_factor, y = mofa_mean_sil_score, group = 1, col = "MOFA")) +
  geom_point(aes(x = num_pc, y = mean_sil_score, col = "StabMap")) +
  geom_line(aes(x = num_pc, y =mean_sil_score, group = 1, col = "StabMap")) +
  labs(y = "mean silhoutte score", col = "Tool") + 
  theme_classic()
```

```{r}
cbind(stab_comparison_numfactors, mofa_comparison_numfactors %>% select(num_factor, mean_sil_score, mofa_rmse) %>% rename(mofa_mean_sil_score = mean_sil_score)) %>%
  ggplot() +
  geom_point(aes(x = num_factor, y = mofa_rmse, col = "MOFA")) + 
  geom_line(aes(x = num_factor, y = mofa_rmse, group = 1, col = "MOFA")) +
  geom_point(aes(x = num_pc, y = stab_rmse, col = "StabMap")) +
  geom_line(aes(x = num_pc, y =stab_rmse, group = 1, col = "StabMap")) +
  labs(y = "mean silhoutte score", col = "Tool") + 
  theme_classic()
```

# Random NA cells

```{r}
mofa_random_cells_NA_70 <- read.table("~/R/Data/mofa_random_cells_NA_70.txt", header = TRUE)
mofa_random_cells_NA <- read.table("~/R/Data/mofa_random_cells_NA_15.txt", header = TRUE) %>%
  select(-mofa_rmse) %>%
  cbind(mofa_random_cells_NA_70$mofa_rmse)
```

```{r}
stab_random_cells_NA <- read.table("~/R/Data/stab_random_cells_NA.txt", header = TRUE) 
```

```{r}
random_NA_both <- cbind(
                    stab_random_cells_NA %>%
                    summarize(
                      stab_mean_sil_score_mean = mean(mean_sil_score), 
                      stab_mean_sil_score_sd = sd(mean_sil_score),
                      stab_knn_acc_mean = mean(stab_knn_acc), 
                      stab_knn_acc_sd = sd(stab_knn_acc), 
                      stab_rmse_mean = mean(stab_rmse), 
                      stab_rmse_sd = sd(stab_rmse)
                    ) ,
                    mofa_random_cells_NA %>%
                    summarize(
                      mofa_mean_sil_score_mean = mean(mean_sil_score), 
                      mofa_mean_sil_score_sd = sd(mean_sil_score),
                      mofa_knn_acc_mean = mean(mofa_knn_acc), 
                      mofa_knn_acc_sd = sd(mofa_knn_acc), 
                      mofa_rmse_mean = mean(mofa_random_cells_NA_70$mofa_rmse), 
                      mofa_rmse_sd = sd(mofa_random_cells_NA_70$mofa_rmse)
                    ) 
                  )

random_NA_both %>%
  ggplot() +
  geom_col(aes(x = 1, y = mofa_mean_sil_score_mean, fill = "MOFA"), width = 0.2) +
  geom_errorbar(aes(x = 1, ymin = mofa_mean_sil_score_mean - mofa_mean_sil_score_sd, ymax = mofa_mean_sil_score_mean + mofa_mean_sil_score_sd), width = 0.05) +
  geom_col(aes(x = 1.25, y = stab_mean_sil_score_mean, fill = "StabMap"), width = 0.2) +
  geom_errorbar(aes(x = 1.25, ymin = stab_mean_sil_score_mean - stab_mean_sil_score_sd, ymax = stab_mean_sil_score_mean + stab_mean_sil_score_sd), width = 0.05)+
  theme_classic() +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
  labs(x = "", fill = "Tool", y = "Mean silhoutte width") 
```

```{r}
random_NA_both %>%
  ggplot() +
  geom_col(aes(x = 1, y = mofa_knn_acc_mean, fill = "MOFA"), width = 0.2) +
  geom_errorbar(aes(x = 1, ymin = mofa_knn_acc_mean - mofa_knn_acc_sd, ymax = mofa_knn_acc_mean + mofa_knn_acc_sd), width = 0.05) +
  geom_col(aes(x = 1.25, y = stab_knn_acc_mean, fill = "StabMap"), width = 0.2) +
  geom_errorbar(aes(x = 1.25, ymin = stab_knn_acc_mean - stab_knn_acc_sd, ymax = stab_knn_acc_mean + stab_knn_acc_sd), width = 0.05)+
  theme_classic() +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
  labs(x = "", fill = "Tool", y = "Mean Celltype Accuracy") 
```

```{r}
random_NA_both %>%
  ggplot() +
  geom_col(aes(x = 1, y = mofa_rmse_mean, fill = "MOFA"), width = 0.2) +
  geom_errorbar(aes(x = 1, ymin = mofa_rmse_mean - mofa_rmse_sd, ymax = mofa_rmse_mean + mofa_rmse_sd), width = 0.05) +
  geom_col(aes(x = 1.25, y = stab_rmse_mean, fill = "StabMap"), width = 0.2) +
  geom_errorbar(aes(x = 1.25, ymin = stab_rmse_mean - stab_rmse_sd, ymax = stab_rmse_mean + stab_rmse_sd), width = 0.05)+
  theme_classic() +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
  labs(x = "", fill = "Tool", y = "Mean Celltype Accuracy") 
```

# Different bridge sizes

## ATAC NA first

```{r}
# mofa_bridge <- read.table("~/R/Data/mofa_bridge.txt", header = TRUE)
mofa_bridge_ATAC <- read.table("~/R/Data/mofa_bridge_70_ATACNA.txt", header = TRUE)
mofa_bridge_sep <- read.table("~/R/Data/mofa_bridge_70_sep.txt", header = TRUE)
```

```{r}
ggplot(mofa_bridge_ATAC) +
  geom_point(aes(x = bridge_size, y = mean_sil_score)) +
  geom_line(aes(x = bridge_size, y = mean_sil_score, group = 1)) +
  theme_classic()
  
ggplot(mofa_bridge_ATAC) +
  geom_point(aes(x = bridge_size, y = mofa_knn_acc_bal)) +
  geom_line(aes(x = bridge_size, y = mofa_knn_acc_bal, group = 1)) +
  theme_classic()

ggplot() +
  geom_point(data = mofa_bridge_ATAC, aes( x = bridge_size, y = mofa_rmse)) +
  geom_line(data =mofa_bridge_ATAC, aes( x = bridge_size, y = mofa_rmse, group = 1)) +
  geom_point(data =mofa_bridge_sep, aes( x = bridge_size, y =  mofa_rmse_rna )) +
  geom_point(data =mofa_bridge_sep, aes( x = bridge_size, y =  mofa_rmse_atac )) +
  geom_vline(xintercept = 952) + 
  scale_x_continuous(breaks = c(seq(0, 2000, by = 500), 116, 952)) +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
```

```{r}
# stab_bridge <- read.table("~/R/Data/stab_bridge.txt", header = TRUE)

stab_bridge_ATAC <- read.table("~/R/Data/stab_bridge_ATACNA.txt", header = TRUE)
stab_bridge_sep <- read.table("~/R/Data/stab_bridge_sep.txt", header = TRUE)
```

```{r}
ggplot(stab_bridge_ATAC) +
  geom_point(aes(x = bridge_size, y = mean_sil_score)) +
  geom_line(aes(x = bridge_size, y = mean_sil_score, group = 1)) +
  theme_classic()
  
ggplot(stab_bridge_ATAC) +
  geom_point(aes(x = bridge_size, y = stab_knn_acc_bal)) +
  geom_line(aes(x = bridge_size, y = stab_knn_acc_bal, group = 1)) +
  theme_classic()

ggplot() +
  geom_point(data = stab_bridge_ATAC, aes( x = bridge_size, y = stab_rmse)) +
  geom_line(data =stab_bridge_ATAC, aes( x = bridge_size, y = stab_rmse, group = 1)) +
  geom_point(data =stab_bridge_sep, aes( x = bridge_size, y =  stab_rmse_rna )) +
  geom_point(data =stab_bridge_sep, aes( x = bridge_size, y =  stab_rmse_atac )) +
  geom_vline(xintercept = 952) + 
  scale_x_continuous(breaks = c(seq(0, 2000, by = 500), 116, 952)) +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
```

```{r}
ggplot() +
  geom_point(data = stab_bridge_ATAC, aes(x = bridge_size, y = mean_sil_score, col = "StabMap")) +
  geom_line(data =stab_bridge_ATAC, aes(x = bridge_size, y = mean_sil_score, group = 1, col = "StabMap")) +
  geom_point(data =mofa_bridge_ATAC, aes(x = bridge_size, y = mean_sil_score, col = "MOFA")) +
  geom_line(data = mofa_bridge_ATAC, aes(x = bridge_size, y = mean_sil_score, group = 1, col = "MOFA")) +
  theme_classic()
  
ggplot() +
  geom_point(data = stab_bridge_ATAC, aes(x = bridge_size, y = stab_knn_acc_bal, col = "StabMap")) +
  geom_line(data =stab_bridge_ATAC, aes(x = bridge_size, y = stab_knn_acc_bal, group = 1, col = "StabMap")) +
  geom_point(data =mofa_bridge_ATAC, aes(x = bridge_size, y = mofa_knn_acc_bal, col = "MOFA")) +
  geom_line(data = mofa_bridge_ATAC, aes(x = bridge_size, y = mofa_knn_acc_bal, group = 1, col = "MOFA")) +
  theme_classic()

ggplot() +
  geom_point(data = stab_bridge_ATAC, aes(x = bridge_size, y = stab_rmse, col = "StabMap")) +
  geom_line(data =stab_bridge_ATAC, aes(x = bridge_size, y = stab_rmse, group = 1, col = "StabMap")) +
  geom_point(data =mofa_bridge_ATAC, aes(x = bridge_size, y = mofa_rmse, col = "MOFA")) +
  geom_line(data = mofa_bridge_ATAC, aes(x = bridge_size, y = mofa_rmse, group = 1, col = "MOFA")) +
  geom_vline(xintercept = 952) + 
  scale_x_continuous(breaks = c(seq(0, 2000, by = 500), 116, 952)) +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
```

## RNA NA firsst

```{r}
mofa_bridge_RNA <- read.table("~/R/Data/mofa_bridge_70_RNANA.txt", header = TRUE)
```

```{r}
ggplot(mofa_bridge_RNA) +
  geom_point(aes(x = 1740-bridge_size, y = mean_sil_score)) +
  geom_line(aes(x = 1740-bridge_size, y = mean_sil_score, group = 1)) +
  theme_classic() +
  xlab("bridge_size")
  
ggplot(mofa_bridge_RNA) +
  geom_point(aes(x = 1740-bridge_size, y = mofa_knn_acc_bal)) +
  geom_line(aes(x = 1740-bridge_size, y = mofa_knn_acc_bal, group = 1)) +
  theme_classic() +
  xlab("bridge_size")

ggplot(mofa_bridge_RNA) +
  geom_point(aes(x = 1740-bridge_size, y = mofa_rmse)) +
  geom_line(aes(x = 1740-bridge_size, y = mofa_rmse, group = 1)) +
  geom_vline(xintercept = 952) + 
  scale_x_continuous(breaks = c(seq(0, 2000, by = 500), 116, 952)) +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  +
  xlab("bridge_size")
```

```{r}
stab_bridge_RNA <- read.table("~/R/Data/stab_bridge_RNANA.txt", header = TRUE)
```

```{r}
ggplot(stab_bridge_RNA) +
  geom_point(aes(x = 1740-bridge_size, y = mean_sil_score)) +
  geom_line(aes(x = 1740-bridge_size, y = mean_sil_score, group = 1)) +
  theme_classic() +
  xlab("bridge_size")
  
ggplot(stab_bridge_RNA) +
  geom_point(aes(x = 1740-bridge_size, y = stab_knn_acc_bal)) +
  geom_line(aes(x = 1740-bridge_size, y = stab_knn_acc_bal, group = 1)) +
  theme_classic() +
  xlab("bridge_size")

ggplot(stab_bridge_RNA) +
  geom_point(aes(x = 1740-bridge_size, y = stab_rmse)) +
  geom_line(aes(x = 1740-bridge_size, y = stab_rmse, group = 1)) +
  geom_vline(xintercept = 952) + 
  scale_x_continuous(breaks = c(seq(0, 2000, by = 500), 116, 952)) +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  +
  xlab("bridge_size")
```

```{r}
ggplot() +
  geom_point(data = stab_bridge_RNA, aes(x = 1740 - bridge_size, y = mean_sil_score, col = "StabMap")) +
  geom_line(data =stab_bridge_RNA, aes(x = 1740 - bridge_size, y = mean_sil_score, group = 1, col = "StabMap")) +
  geom_point(data =mofa_bridge_RNA, aes(x = 1740 - bridge_size, y = mean_sil_score, col = "MOFA")) +
  geom_line(data = mofa_bridge_RNA, aes(x = 1740 - bridge_size, y = mean_sil_score, group = 1, col = "MOFA")) +
  theme_classic()
  
ggplot() +
  geom_point(data = stab_bridge_RNA, aes(x = 1740 - bridge_size, y = stab_knn_acc_bal, col = "StabMap")) +
  geom_line(data =stab_bridge_RNA, aes(x = 1740 - bridge_size, y = stab_knn_acc_bal, group = 1, col = "StabMap")) +
  geom_point(data =mofa_bridge_RNA, aes(x = 1740 - bridge_size, y = mofa_knn_acc_bal, col = "MOFA")) +
  geom_line(data = mofa_bridge_RNA, aes(x = 1740 - bridge_size, y = mofa_knn_acc_bal, group = 1, col = "MOFA")) +
  theme_classic()

ggplot() +
  geom_point(data = stab_bridge_RNA, aes(x = 1740 - bridge_size, y = stab_rmse, col = "StabMap")) +
  geom_line(data =stab_bridge_RNA, aes(x = 1740 - bridge_size, y = stab_rmse, group = 1, col = "StabMap")) +
  geom_point(data =mofa_bridge_RNA, aes(x = 1740 - bridge_size, y = mofa_rmse, col = "MOFA")) +
  geom_line(data = mofa_bridge_RNA, aes(x = 1740 - bridge_size, y = mofa_rmse, group = 1, col = "MOFA")) +
  geom_vline(xintercept = 788) + 
  scale_x_continuous(breaks = c(seq(0, 2000, by = 500), 788)) +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
```

## Random NA

```{r}
mofa_bridge_rand <- read.table("~/R/Data/mofa_bridge_70_rand.txt", header = TRUE)

mofa_bridge_rand_summ <- mofa_bridge_rand %>% group_by(bridge_size) %>%
                    summarize(
                      mofa_mean_sil_score_mean = mean(mean_sil_score), 
                      mofa_mean_sil_score_sd = sd(mean_sil_score),
                      mofa_knn_acc_bal_mean = mean(mofa_knn_acc_bal), 
                      mofa_knn_acc_bal_sd = sd(mofa_knn_acc_bal), 
                      mofa_rmse_mean = mean(mofa_rmse), 
                      mofa_rmse_sd = sd(mofa_rmse)
                    ) 

ggplot(mofa_bridge_rand_summ) +
  geom_point(aes(x = 1740-bridge_size, y = mofa_mean_sil_score_mean)) +
  geom_errorbar(aes(x = 1740-bridge_size, ymin = mofa_mean_sil_score_mean - mofa_mean_sil_score_sd, ymax = mofa_mean_sil_score_mean + mofa_mean_sil_score_sd), width = 0.05) +
  geom_line(aes(x = 1740-bridge_size, y = mofa_mean_sil_score_mean, group = 1)) +
  theme_classic() +
  xlab("bridge_size")

ggplot(mofa_bridge_rand_summ) +
  geom_point(aes(x = 1740-bridge_size, y = mofa_knn_acc_bal_mean)) +
  geom_errorbar(aes(x = 1740-bridge_size, ymin = mofa_knn_acc_bal_mean - mofa_knn_acc_bal_sd, ymax = mofa_knn_acc_bal_mean + mofa_knn_acc_bal_sd), width = 0.05) +
  geom_line(aes(x = 1740-bridge_size, y = mofa_knn_acc_bal_mean, group = 1)) +
  theme_classic() +
  xlab("bridge_size")

ggplot(mofa_bridge_rand_summ) +
  geom_point(aes(x = 1740- bridge_size, y = mofa_rmse_mean)) +
  geom_errorbar(aes(x = 1740- bridge_size, ymin = mofa_rmse_mean - mofa_rmse_sd, ymax = mofa_rmse_mean + mofa_rmse_sd), width = 0.05) +
  geom_line(aes(x = 1740-bridge_size, y = mofa_rmse_mean, group = 1)) +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  xlab("bridge_size")
```

```{r}
stab_bridge_rand <- read.table("~/R/Data/stab_bridge_rand.txt", header = TRUE)

stab_bridge_rand_summ <- stab_bridge_rand %>%
  group_by(bridge_size) %>%
                    summarize(
                      stab_mean_sil_score_mean = mean(mean_sil_score), 
                      stab_mean_sil_score_sd = sd(mean_sil_score),
                      stab_knn_acc_bal_mean = mean(stab_knn_acc_bal), 
                      stab_knn_acc_bal_sd = sd(stab_knn_acc_bal), 
                      stab_rmse_mean = mean(stab_rmse), 
                      stab_rmse_sd = sd(stab_rmse)
                    )

ggplot(stab_bridge_rand_summ) +
  geom_point(aes(x = 1740- bridge_size, y = stab_mean_sil_score_mean)) +
  geom_errorbar(aes(x = 1740- bridge_size, ymin = stab_mean_sil_score_mean - stab_mean_sil_score_sd, ymax = stab_mean_sil_score_mean + stab_mean_sil_score_sd), width = 0.05)+
  geom_line(aes(x = 1740- bridge_size, y = stab_mean_sil_score_mean, group = 1)) +
  theme_classic() +
  xlab("bridge_size")
  
ggplot(stab_bridge_rand_summ) +
  geom_point(aes(x = 1740- bridge_size, y = stab_knn_acc_bal_mean)) +
   geom_errorbar(aes(x = 1740- bridge_size, ymin = stab_knn_acc_bal_mean - stab_knn_acc_bal_sd, ymax = stab_knn_acc_bal_mean + stab_knn_acc_bal_sd), width = 0.05)+
  geom_line(aes(x = 1740- bridge_size, y = stab_knn_acc_bal_mean, group = 1)) +
  theme_classic() +
  xlab("bridge_size")

ggplot(stab_bridge_rand_summ) +
  geom_point(aes(x = 1740- bridge_size, y = stab_rmse_mean)) +
    geom_errorbar(aes(x = 1740- bridge_size, ymin = stab_rmse_mean - stab_rmse_sd, ymax = stab_rmse_mean + stab_rmse_sd), width = 0.05)+
  geom_line(aes(x = 1740- bridge_size, y = stab_rmse_mean, group = 1)) +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  +
  xlab("bridge_size")
```
